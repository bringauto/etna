version: '3'
services:
  virtual-vehicle:
    image: bringauto/virtual-vehicle:v3.2.1
    profiles: ["all", "without-module-gateway", "without-external-server", "core", "virtual-vehicle", "without-fleet-management"]
    volumes:
      - ./docker_volumes/virtual-vehicle-utility:/virtual-vehicle-utility/log
      - ./configuration/virtual-vehicle-utility:/virtual-vehicle-utility/config
    entrypoint: ["/virtual-vehicle-utility/bin/virtual-vehicle-utility",
                 "--config=/virtual-vehicle-utility/config/config.json"]
    restart: "no"
    networks:
      - bring-emulator
    depends_on:
      initialize-log-folders:
        condition: service_completed_successfully

  virtual-plc:
    image: bringauto/virtual-plc:v1.0.0
    profiles: ["all", "without-module-gateway", "without-external-server", "core", "virtual-plc", "without-fleet-management"]
    volumes:
      - ./docker_volumes/virtual-plc:/home/bringauto/virtual-plc/log
      - ./configuration/virtual-plc:/home/bringauto/virtual-plc/config
    entrypoint: ["/home/bringauto/virtual-plc/bin/virtual_plc",
                 "--config=/home/bringauto/virtual-plc/config/config.json"]
    restart: "no"
    networks:
      - bring-emulator
    depends_on:
      initialize-log-folders:
        condition: service_completed_successfully

  module-gateway:
    image:  bringauto/module-gateway:v1.2.1
    profiles: ["all", "without-devices", "without-external-server", "module-gateway", "core", "without-fleet-management"]
    volumes:
      - ./docker_volumes/module-gateway:/home/bringauto/log/
      - ./configuration/module-gateway:/home/bringauto/config/
    ports:
      - 1636:1636
    entrypoint: ["/home/bringauto/module-gateway/bin/module-gateway-app",
                 "--config-path=/home/bringauto/config/config.json",
                 "--verbose"]
    restart: "no"
    networks:
      - bring-emulator
    depends_on:
      initialize-log-folders:
        condition: service_completed_successfully

  vernemq:
    image: bringauto/vernemq:1.13.0
    profiles: ["all", "without-devices", "without-module-gateway", "without-external-server", "mqtt", "without-fleet-management", "cloud"]
    volumes:
      - ./docker_volumes/vernemq:/vernemq/log/log/
      - ./configuration/vernemq:/etc/vernemq/
    ports:
      - 1883:1883
      - 8883:8883
    restart: "no"
    networks:
      - bring-emulator
    depends_on:
      initialize-log-folders:
        condition: service_completed_successfully

  external-server:
    image: bringauto/external-server:v2.0.1
    profiles: ["all", "without-devices", "without-module-gateway", "without-fleet-management", "external_server", "cloud"]
    volumes:
      - ./docker_volumes/external-server/:/home/bringauto/log/
      - ./configuration/external-server/:/home/bringauto/config/
    command: -c /home/bringauto/config/config.json
    restart: "no"
    networks:
      - bring-emulator
    depends_on:
      initialize-log-folders:
        condition: service_completed_successfully

  http-api:
    image: bringauto/fleet-protocol-http-api:v2.7.0
    profiles: ["all", "without-devices", "without-module-gateway", "without-external-server", "http-api", "without-fleet-management", "for-virtual-fleet", "cloud"]
    ports:
      - 8080:8080
    restart: "no"
    depends_on:
      postgresql-database:
        condition: service_healthy
    networks:
      - bring-emulator
    volumes:
      - ./configuration/http-api/config.json:/home/bringauto/config.json
      - ./docker_volumes/http-api:/home/bringauto/log
    entrypoint:
      ["python3", "-m", "server",
       "config.json",
       "--location=postgresql-database"]

  integration-layer:
    image: bringauto/fleet-management-integration-layer:v2.1.0
    profiles: ["all", "without-devices", "without-module-gateway", "without-external-server", "without-fleet-management", "for-virtual-fleet", "cloud"]
    restart: "no"
    networks:
      - bring-emulator
    volumes:
      - ./configuration/integration-layer:/home/bringauto/config
      - ./docker_volumes/integration-layer:/home/bringauto/log
    command: config/config.json
    depends_on:
      initialize-log-folders:
        condition: service_completed_successfully

  management-api:
    image: bringauto/fleet-management-http-api:v3.2.0
    profiles: ["all", "without-devices", "without-module-gateway", "without-external-server", "management-api", "without-fleet-management", "for-virtual-fleet", "cloud"]
    ports:
      - 8081:8081
    restart: "no"
    depends_on:
      postgresql-database:
        condition: service_healthy
    networks:
      - bring-emulator
    volumes:
      - ./configuration/management-api/config.json:/home/bringauto/config.json
      - ./docker_volumes/management-api:/home/bringauto/log
    entrypoint:
      ["python3", "-m", "fleet_management_api",
       "config.json",
       "--location=postgresql-database"]

  virtual-fleet-management:
    image: bringauto/virtual-fleet-management:v3.0.1
    profiles: ["all", "without-devices", "without-module-gateway", "without-external-server", "for-virtual-fleet", "cloud"]
    restart: "no"
    depends_on:
      management-api:
        condition: service_started
    networks:
      - bring-emulator
    volumes:
      - ./configuration/virtual-fleet-management/:/home/bringauto/virtual-fleet-management/resources/
      - ./docker_volumes/virtual-fleet-management/:/home/bringauto/virtual-fleet-management/log/
    entrypoint:
      ["/home/bringauto/virtual-fleet-management/virtual-fleet-management",
       "-config=/home/bringauto/virtual-fleet-management/resources/${ETNA_VFM_CONFIG:-config.json}",
       "-scenario-dir=/home/bringauto/virtual-fleet-management/resources/scenarios/${ETNA_VFM_SCENARIO:-default}/",
      ]

  postgresql-database:
    image: postgres:16
    profiles: ["all", "without-devices", "without-module-gateway", "without-external-server", "http-api", "management-api", "without-fleet-management", "for-virtual-fleet", "cloud"]
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
    restart: "no"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
    networks:
      - bring-emulator
    ports:
      - 5432:5432
    volumes:
      - ./db/insert_test_api_key.sh:/docker-entrypoint-initdb.d/insert_test_api_key.sh
    depends_on:
      initialize-log-folders:
        condition: service_completed_successfully

  mission-module-display-tool:
    image: bringauto/mission-module-display-tool:v1.0.0
    profiles: ["all", "without-devices", "without-module-gateway", "without-external-server", "without-fleet-management", "for-virtual-fleet"]
    restart: "no"
    ports:
      - 5000:5000
    networks:
      - bring-emulator
    volumes:
      - ./configuration/mission-module-display-tool/config.json:/mission-module-display-tool/config/config-docker.json
    command: --config=config/config-docker.json
    depends_on:
      initialize-log-folders:
        condition: service_completed_successfully

  initialize-log-folders:
    image: ubuntu:24.04
    restart: "no"
    volumes:
      - ./docker_volumes:/docker_volumes
    entrypoint:
      [
        "/usr/bin/chown",
        "-R",
        "5000:5000",
        "/docker_volumes/module-gateway",
        "/docker_volumes/external-server",
        "/docker_volumes/virtual-vehicle-utility",
        "/docker_volumes/integration-layer",
        "/docker_volumes/http-api",
        "/docker_volumes/management-api"
      ]

networks:
  bring-emulator:
    name: bring-emulator
